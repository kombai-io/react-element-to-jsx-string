{"version":3,"file":"index.js","sources":["../../src/formatter/spacer.js","../../src/formatter/sortObject.js","../../src/tree.js","../../src/parser/parseReactElement.js","../../src/formatter/formatFunction.js","../../src/formatter/formatComplexDataStructure.js","../../src/formatter/formatPropValue.js","../../src/formatter/formatProp.js","../../src/formatter/mergeSiblingPlainStringChildrenReducer.js","../../src/formatter/sortPropsByNames.js","../../src/formatter/createPropFilter.js","../../src/formatter/formatReactElementNode.js","../../src/formatter/formatReactFragmentNode.js","../../src/formatter/formatTreeNode.js","../../src/formatter/formatTree.js","../../src/index.js"],"sourcesContent":["/* @flow */\n\nexport default (times: number, tabStop: number): string => {\n  if (times === 0) {\n    return '';\n  }\n\n  return new Array(times * tabStop).fill(' ').join('');\n};\n","/* @flow */\nimport * as React from 'react';\n\nfunction safeSortObject(value: any, seen: WeakSet<any>): any {\n  // return non-object value as is\n  if (value === null || typeof value !== 'object') {\n    return value;\n  }\n\n  // return date, regexp and react element values as is\n  if (\n    value instanceof Date ||\n    value instanceof RegExp ||\n    React.isValidElement(value)\n  ) {\n    return value;\n  }\n\n  seen.add(value);\n\n  // make a copy of array with each item passed through the sorting algorithm\n  if (Array.isArray(value)) {\n    return value.map(v => safeSortObject(v, seen));\n  }\n\n  // make a copy of object with key sorted\n  return Object.keys(value)\n    .sort()\n    .reduce((result, key) => {\n      if (key === '_owner') {\n        return result;\n      }\n      if (key === 'current' || seen.has(value[key])) {\n        // eslint-disable-next-line no-param-reassign\n        result[key] = '[Circular]';\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        result[key] = safeSortObject(value[key], seen);\n      }\n      return result;\n    }, {});\n}\n\nexport default function sortObject(value: any): any {\n  return safeSortObject(value, new WeakSet());\n}\n","/* @flow */\n/* eslint-disable no-use-before-define */\n\nimport type { Key } from 'react';\n\ntype PropsType = { [key: string]: any };\ntype DefaultPropsType = { [key: string]: any };\n\nexport type StringTreeNode = {|\n  type: 'string',\n  value: string,\n|};\n\nexport type NumberTreeNode = {|\n  type: 'number',\n  value: number,\n|};\n\nexport type ReactElementTreeNode = {|\n  type: 'ReactElement',\n  displayName: string,\n  props: PropsType,\n  defaultProps: DefaultPropsType,\n  childrens: TreeNode[],\n|};\n\nexport type ReactFragmentTreeNode = {|\n  type: 'ReactFragment',\n  key: ?Key,\n  childrens: TreeNode[],\n|};\n\nexport type TreeNode =\n  | StringTreeNode\n  | NumberTreeNode\n  | ReactElementTreeNode\n  | ReactFragmentTreeNode;\n\nexport const createStringTreeNode = (value: string): StringTreeNode => ({\n  type: 'string',\n  value,\n});\n\nexport const createNumberTreeNode = (value: number): NumberTreeNode => ({\n  type: 'number',\n  value,\n});\n\nexport const createReactElementTreeNode = (\n  displayName: string,\n  props: PropsType,\n  defaultProps: DefaultPropsType,\n  childrens: TreeNode[]\n): ReactElementTreeNode => ({\n  type: 'ReactElement',\n  displayName,\n  props,\n  defaultProps,\n  childrens,\n});\n\nexport const createReactFragmentTreeNode = (\n  key: ?Key,\n  childrens: TreeNode[]\n): ReactFragmentTreeNode => ({\n  type: 'ReactFragment',\n  key,\n  childrens,\n});\n","/* @flow */\n\nimport React, { type Element as ReactElement, Fragment } from 'react';\nimport {\n  ForwardRef,\n  isContextConsumer,\n  isContextProvider,\n  isForwardRef,\n  isLazy,\n  isMemo,\n  isProfiler,\n  isStrictMode,\n  isSuspense,\n  Memo,\n} from 'react-is';\nimport type { Options } from './../options';\nimport {\n  createStringTreeNode,\n  createNumberTreeNode,\n  createReactElementTreeNode,\n  createReactFragmentTreeNode,\n} from './../tree';\nimport type { TreeNode } from './../tree';\n\nconst supportFragment = Boolean(Fragment);\n\nconst getFunctionTypeName = (functionType): string => {\n  if (!functionType.name || functionType.name === '_default') {\n    return 'No Display Name';\n  }\n  return functionType.name;\n};\n\nconst getWrappedComponentDisplayName = (Component: *): string => {\n  switch (true) {\n    case Boolean(Component.displayName):\n      return Component.displayName;\n    case Component.$$typeof === Memo:\n      return getWrappedComponentDisplayName(Component.type);\n    case Component.$$typeof === ForwardRef:\n      return getWrappedComponentDisplayName(Component.render);\n    default:\n      return getFunctionTypeName(Component);\n  }\n};\n\n// heavily inspired by:\n// https://github.com/facebook/react/blob/3746eaf985dd92f8aa5f5658941d07b6b855e9d9/packages/react-devtools-shared/src/backend/renderer.js#L399-L496\nconst getReactElementDisplayName = (element: ReactElement<*>): string => {\n  switch (true) {\n    case typeof element.type === 'string':\n      return element.type;\n    case typeof element.type === 'function':\n      if (element.type.displayName) {\n        return element.type.displayName;\n      }\n      return getFunctionTypeName(element.type);\n    case isForwardRef(element):\n    case isMemo(element):\n      return getWrappedComponentDisplayName(element.type);\n    case isContextConsumer(element):\n      return `${element.type._context.displayName || 'Context'}.Consumer`;\n    case isContextProvider(element):\n      return `${element.type._context.displayName || 'Context'}.Provider`;\n    case isLazy(element):\n      return 'Lazy';\n    case isProfiler(element):\n      return 'Profiler';\n    case isStrictMode(element):\n      return 'StrictMode';\n    case isSuspense(element):\n      return 'Suspense';\n    default:\n      return 'UnknownElementType';\n  }\n};\n\nconst noChildren = (propsValue, propName) => propName !== 'children';\n\nconst onlyMeaningfulChildren = (children): boolean =>\n  children !== true &&\n  children !== false &&\n  children !== null &&\n  children !== '';\n\nconst filterProps = (originalProps: {}, cb: (any, string) => boolean) => {\n  const filteredProps = {};\n\n  Object.keys(originalProps)\n    .filter(key => cb(originalProps[key], key))\n    .forEach(key => (filteredProps[key] = originalProps[key]));\n\n  return filteredProps;\n};\n\nconst parseReactElement = (\n  element: ReactElement<*> | string | number,\n  options: Options\n): TreeNode => {\n  const { displayName: displayNameFn = getReactElementDisplayName } = options;\n\n  if (typeof element === 'string') {\n    return createStringTreeNode(element);\n  } else if (typeof element === 'number') {\n    return createNumberTreeNode(element);\n  } else if (!React.isValidElement(element)) {\n    throw new Error(\n      `react-element-to-jsx-string: Expected a React.Element, got \\`${typeof element}\\``\n    );\n  }\n\n  const displayName = displayNameFn(element);\n\n  const props = filterProps(element.props, noChildren);\n  if (element.ref !== null) {\n    props.ref = element.ref;\n  }\n\n  const key = element.key;\n  if (typeof key === 'string' && key.search(/^\\./)) {\n    // React automatically add key=\".X\" when there are some children\n    props.key = key;\n  }\n\n  const defaultProps = filterProps(element.type.defaultProps || {}, noChildren);\n  const childrens = React.Children.toArray(element.props.children)\n    .filter(onlyMeaningfulChildren)\n    .map(child => parseReactElement(child, options));\n\n  if (supportFragment && element.type === Fragment) {\n    return createReactFragmentTreeNode(key, childrens);\n  }\n\n  return createReactElementTreeNode(\n    displayName,\n    props,\n    defaultProps,\n    childrens\n  );\n};\n\nexport default parseReactElement;\n","import type { Options } from './../options';\n\nfunction noRefCheck() {}\n\nexport const inlineFunction = (fn: any): string =>\n  fn\n    .toString()\n    .split('\\n')\n    .map(line => line.trim())\n    .join('');\n\nexport const preserveFunctionLineBreak = (fn: any): string => fn.toString();\n\nconst defaultFunctionValue = inlineFunction;\n\nexport default (fn: Function, options: Options): string => {\n  const { functionValue = defaultFunctionValue, showFunctions } = options;\n  if (!showFunctions && functionValue === defaultFunctionValue) {\n    return functionValue(noRefCheck);\n  }\n\n  return functionValue(fn);\n};\n","/* @flow */\n\nimport { isValidElement } from 'react';\nimport { prettyPrint } from '@base2/pretty-print-object';\nimport sortObject from './sortObject';\nimport parseReactElement from './../parser/parseReactElement';\nimport formatTreeNode from './formatTreeNode';\nimport formatFunction from './formatFunction';\nimport spacer from './spacer';\nimport type { Options } from './../options';\n\nexport default (\n  value: Object | Array<any>,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const normalizedValue = sortObject(value);\n\n  const stringifiedValue = prettyPrint(normalizedValue, {\n    transform: (currentObj, prop, originalResult) => {\n      const currentValue = currentObj[prop];\n\n      if (currentValue && isValidElement(currentValue)) {\n        return formatTreeNode(\n          parseReactElement(currentValue, options),\n          true,\n          lvl,\n          options\n        );\n      }\n\n      if (typeof currentValue === 'function') {\n        return formatFunction(currentValue, options);\n      }\n\n      return originalResult();\n    },\n  });\n\n  if (inline) {\n    return stringifiedValue\n      .replace(/\\s+/g, ' ')\n      .replace(/{ /g, '{')\n      .replace(/ }/g, '}')\n      .replace(/\\[ /g, '[')\n      .replace(/ ]/g, ']');\n  }\n\n  // Replace tabs with spaces, and add necessary indentation in front of each new line\n  return stringifiedValue\n    .replace(/\\t/g, spacer(1, options.tabStop))\n    .replace(/\\n([^$])/g, `\\n${spacer(lvl + 1, options.tabStop)}$1`);\n};\n","/* @flow */\n\nimport { isPlainObject } from 'is-plain-object';\nimport { isValidElement } from 'react';\nimport formatComplexDataStructure from './formatComplexDataStructure';\nimport formatFunction from './formatFunction';\nimport formatTreeNode from './formatTreeNode';\nimport type { Options } from './../options';\nimport parseReactElement from './../parser/parseReactElement';\n\nconst escape = (s: string): string => s.replace(/\"/g, '&quot;');\n\nconst formatPropValue = (\n  propValue: any,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  if (typeof propValue === 'number') {\n    return `{${String(propValue)}}`;\n  }\n\n  if (typeof propValue === 'string') {\n    return `\"${escape(propValue)}\"`;\n  }\n\n  // > \"Symbols (new in ECMAScript 2015, not yet supported in Flow)\"\n  // @see: https://flow.org/en/docs/types/primitives/\n  // $FlowFixMe: Flow does not support Symbol\n  if (typeof propValue === 'symbol') {\n    const symbolDescription = propValue\n      .valueOf()\n      .toString()\n      .replace(/Symbol\\((.*)\\)/, '$1');\n\n    if (!symbolDescription) {\n      return `{Symbol()}`;\n    }\n\n    return `{Symbol('${symbolDescription}')}`;\n  }\n\n  if (typeof propValue === 'function') {\n    return `{${formatFunction(propValue, options)}}`;\n  }\n\n  if (isValidElement(propValue)) {\n    return `{${formatTreeNode(\n      parseReactElement(propValue, options),\n      true,\n      lvl,\n      options\n    )}}`;\n  }\n\n  if (propValue instanceof Date) {\n    if (isNaN(propValue.valueOf())) {\n      return `{new Date(NaN)}`;\n    }\n    return `{new Date(\"${propValue.toISOString()}\")}`;\n  }\n\n  if (isPlainObject(propValue) || Array.isArray(propValue)) {\n    return `{${formatComplexDataStructure(propValue, inline, lvl, options)}}`;\n  }\n\n  return `{${String(propValue)}}`;\n};\n\nexport default formatPropValue;\n","/* @flow */\n\nimport spacer from './spacer';\nimport formatPropValue from './formatPropValue';\nimport type { Options } from './../options';\n\nexport default (\n  name: string,\n  hasValue: boolean,\n  value: any,\n  hasDefaultValue: boolean,\n  defaultValue: any,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): {\n  attributeFormattedInline: string,\n  attributeFormattedMultiline: string,\n  isMultilineAttribute: boolean,\n} => {\n  if (!hasValue && !hasDefaultValue) {\n    throw new Error(\n      `The prop \"${name}\" has no value and no default: could not be formatted`\n    );\n  }\n\n  const usedValue = hasValue ? value : defaultValue;\n\n  const { useBooleanShorthandSyntax, tabStop } = options;\n\n  const formattedPropValue = formatPropValue(usedValue, inline, lvl, options);\n\n  let attributeFormattedInline = ' ';\n  let attributeFormattedMultiline = `\\n${spacer(lvl + 1, tabStop)}`;\n  const isMultilineAttribute = formattedPropValue.includes('\\n');\n\n  if (\n    useBooleanShorthandSyntax &&\n    formattedPropValue === '{false}' &&\n    !hasDefaultValue\n  ) {\n    // If a boolean is false and not different from it's default, we do not render the attribute\n    attributeFormattedInline = '';\n    attributeFormattedMultiline = '';\n  } else if (useBooleanShorthandSyntax && formattedPropValue === '{true}') {\n    attributeFormattedInline += `${name}`;\n    attributeFormattedMultiline += `${name}`;\n  } else {\n    attributeFormattedInline += `${name}=${formattedPropValue}`;\n    attributeFormattedMultiline += `${name}=${formattedPropValue}`;\n  }\n\n  return {\n    attributeFormattedInline,\n    attributeFormattedMultiline,\n    isMultilineAttribute,\n  };\n};\n","/* @flow */\n\nimport { createStringTreeNode } from './../tree';\nimport type { TreeNode } from './../tree';\n\nexport default (\n  previousNodes: TreeNode[],\n  currentNode: TreeNode\n): TreeNode[] => {\n  const nodes = previousNodes.slice(\n    0,\n    previousNodes.length > 0 ? previousNodes.length - 1 : 0\n  );\n  const previousNode = previousNodes[previousNodes.length - 1];\n\n  if (\n    previousNode &&\n    (currentNode.type === 'string' || currentNode.type === 'number') &&\n    (previousNode.type === 'string' || previousNode.type === 'number')\n  ) {\n    nodes.push(\n      createStringTreeNode(\n        String(previousNode.value) + String(currentNode.value)\n      )\n    );\n  } else {\n    if (previousNode) {\n      nodes.push(previousNode);\n    }\n\n    nodes.push(currentNode);\n  }\n\n  return nodes;\n};\n","/* @flow */\n\nconst isKeyOrRefProps = (propName: string) => ['key', 'ref'].includes(propName);\n\nexport default (shouldSortUserProps: boolean) => (\n  props: string[]\n): string[] => {\n  const haveKeyProp = props.includes('key');\n  const haveRefProp = props.includes('ref');\n\n  const userPropsOnly = props.filter(oneProp => !isKeyOrRefProps(oneProp));\n\n  const sortedProps = shouldSortUserProps\n    ? [...userPropsOnly.sort()] // We use basic lexical order\n    : [...userPropsOnly];\n\n  if (haveRefProp) {\n    sortedProps.unshift('ref');\n  }\n\n  if (haveKeyProp) {\n    sortedProps.unshift('key');\n  }\n\n  return sortedProps;\n};\n","/* @flow */\n\nexport default function createPropFilter(\n  props: {},\n  filter: string[] | ((any, string) => boolean)\n) {\n  if (Array.isArray(filter)) {\n    return (key: string) => filter.indexOf(key) === -1;\n  } else {\n    return (key: string) => filter(props[key], key);\n  }\n}\n","/* @flow */\n\nimport spacer from './spacer';\nimport formatTreeNode from './formatTreeNode';\nimport formatProp from './formatProp';\nimport mergeSiblingPlainStringChildrenReducer from './mergeSiblingPlainStringChildrenReducer';\nimport sortPropsByNames from './sortPropsByNames';\nimport createPropFilter from './createPropFilter';\nimport type { Options } from './../options';\nimport type { ReactElementTreeNode } from './../tree';\n\nconst compensateMultilineStringElementIndentation = (\n  element,\n  formattedElement: string,\n  inline: boolean,\n  lvl: number,\n  options: Options\n) => {\n  const { tabStop } = options;\n\n  if (element.type === 'string') {\n    return formattedElement\n      .split('\\n')\n      .map((line, offset) => {\n        if (offset === 0) {\n          return line;\n        }\n\n        return `${spacer(lvl, tabStop)}${line}`;\n      })\n      .join('\\n');\n  }\n\n  return formattedElement;\n};\n\nconst formatOneChildren = (\n  inline: boolean,\n  lvl: number,\n  options: Options\n) => element =>\n  compensateMultilineStringElementIndentation(\n    element,\n    formatTreeNode(element, inline, lvl, options),\n    inline,\n    lvl,\n    options\n  );\n\nconst onlyPropsWithOriginalValue = (defaultProps, props) => propName => {\n  const haveDefaultValue = Object.keys(defaultProps).includes(propName);\n  return (\n    !haveDefaultValue ||\n    (haveDefaultValue && defaultProps[propName] !== props[propName])\n  );\n};\n\nconst isInlineAttributeTooLong = (\n  attributes: string[],\n  inlineAttributeString: string,\n  lvl: number,\n  tabStop: number,\n  maxInlineAttributesLineLength: ?number\n): boolean => {\n  if (!maxInlineAttributesLineLength) {\n    return attributes.length > 1;\n  }\n\n  return (\n    spacer(lvl, tabStop).length + inlineAttributeString.length >\n    maxInlineAttributesLineLength\n  );\n};\n\nconst shouldRenderMultilineAttr = (\n  attributes: string[],\n  inlineAttributeString: string,\n  containsMultilineAttr: boolean,\n  inline: boolean,\n  lvl: number,\n  tabStop: number,\n  maxInlineAttributesLineLength: ?number\n): boolean =>\n  (isInlineAttributeTooLong(\n    attributes,\n    inlineAttributeString,\n    lvl,\n    tabStop,\n    maxInlineAttributesLineLength\n  ) ||\n    containsMultilineAttr) &&\n  !inline;\n\nexport default (\n  node: ReactElementTreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const {\n    type,\n    displayName = '',\n    childrens,\n    props = {},\n    defaultProps = {},\n  } = node;\n\n  if (type !== 'ReactElement') {\n    throw new Error(\n      `The \"formatReactElementNode\" function could only format node of type \"ReactElement\". Given:  ${type}`\n    );\n  }\n\n  const {\n    filterProps,\n    maxInlineAttributesLineLength,\n    showDefaultProps,\n    sortProps,\n    tabStop,\n  } = options;\n\n  let out = `<${displayName}`;\n\n  let outInlineAttr = out;\n  let outMultilineAttr = out;\n  let containsMultilineAttr = false;\n\n  const visibleAttributeNames = [];\n\n  const propFilter = createPropFilter(props, filterProps);\n\n  Object.keys(props)\n    .filter(propFilter)\n    .filter(onlyPropsWithOriginalValue(defaultProps, props))\n    .forEach(propName => visibleAttributeNames.push(propName));\n\n  Object.keys(defaultProps)\n    .filter(propFilter)\n    .filter(() => showDefaultProps)\n    .filter(defaultPropName => !visibleAttributeNames.includes(defaultPropName))\n    .forEach(defaultPropName => visibleAttributeNames.push(defaultPropName));\n\n  const attributes = sortPropsByNames(sortProps)(visibleAttributeNames);\n\n  attributes.forEach(attributeName => {\n    const {\n      attributeFormattedInline,\n      attributeFormattedMultiline,\n      isMultilineAttribute,\n    } = formatProp(\n      attributeName,\n      Object.keys(props).includes(attributeName),\n      props[attributeName],\n      Object.keys(defaultProps).includes(attributeName),\n      defaultProps[attributeName],\n      inline,\n      lvl,\n      options\n    );\n\n    if (isMultilineAttribute) {\n      containsMultilineAttr = true;\n    }\n\n    outInlineAttr += attributeFormattedInline;\n    outMultilineAttr += attributeFormattedMultiline;\n  });\n\n  outMultilineAttr += `\\n${spacer(lvl, tabStop)}`;\n\n  if (\n    shouldRenderMultilineAttr(\n      attributes,\n      outInlineAttr,\n      containsMultilineAttr,\n      inline,\n      lvl,\n      tabStop,\n      maxInlineAttributesLineLength\n    )\n  ) {\n    out = outMultilineAttr;\n  } else {\n    out = outInlineAttr;\n  }\n\n  if (childrens && childrens.length > 0) {\n    const newLvl = lvl + 1;\n\n    out += '>';\n\n    if (!inline) {\n      out += '\\n';\n      out += spacer(newLvl, tabStop);\n    }\n\n    out += childrens\n      .reduce(mergeSiblingPlainStringChildrenReducer, [])\n      .map(formatOneChildren(inline, newLvl, options))\n      .join(!inline ? `\\n${spacer(newLvl, tabStop)}` : '');\n\n    if (!inline) {\n      out += '\\n';\n      out += spacer(newLvl - 1, tabStop);\n    }\n    out += `</${displayName}>`;\n  } else {\n    if (\n      !isInlineAttributeTooLong(\n        attributes,\n        outInlineAttr,\n        lvl,\n        tabStop,\n        maxInlineAttributesLineLength\n      )\n    ) {\n      out += ' ';\n    }\n\n    out += '/>';\n  }\n\n  return out;\n};\n","/* @flow */\n\nimport type { Key } from 'react';\nimport formatReactElementNode from './formatReactElementNode';\nimport type { Options } from './../options';\nimport type {\n  ReactElementTreeNode,\n  ReactFragmentTreeNode,\n  TreeNode,\n} from './../tree';\n\nconst REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX = '';\nconst REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX = 'React.Fragment';\n\nconst toReactElementTreeNode = (\n  displayName: string,\n  key: ?Key,\n  childrens: TreeNode[]\n): ReactElementTreeNode => {\n  let props = {};\n  if (key) {\n    props = { key };\n  }\n\n  return {\n    type: 'ReactElement',\n    displayName,\n    props,\n    defaultProps: {},\n    childrens,\n  };\n};\n\nconst isKeyedFragment = ({ key }: ReactFragmentTreeNode) => Boolean(key);\nconst hasNoChildren = ({ childrens }: ReactFragmentTreeNode) =>\n  childrens.length === 0;\n\nexport default (\n  node: ReactFragmentTreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const { type, key, childrens } = node;\n\n  if (type !== 'ReactFragment') {\n    throw new Error(\n      `The \"formatReactFragmentNode\" function could only format node of type \"ReactFragment\". Given: ${type}`\n    );\n  }\n\n  const { useFragmentShortSyntax } = options;\n\n  let displayName;\n  if (useFragmentShortSyntax) {\n    if (hasNoChildren(node) || isKeyedFragment(node)) {\n      displayName = REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX;\n    } else {\n      displayName = REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX;\n    }\n  } else {\n    displayName = REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX;\n  }\n\n  return formatReactElementNode(\n    toReactElementTreeNode(displayName, key, childrens),\n    inline,\n    lvl,\n    options\n  );\n};\n","/* @flow */\n\nimport formatReactElementNode from './formatReactElementNode';\nimport formatReactFragmentNode from './formatReactFragmentNode';\nimport type { Options } from './../options';\nimport type { TreeNode } from './../tree';\n\nconst jsxStopChars = ['<', '>', '{', '}'];\nconst shouldBeEscaped = (s: string) =>\n  jsxStopChars.some(jsxStopChar => s.includes(jsxStopChar));\n\nconst escape = (s: string) => {\n  if (!shouldBeEscaped(s)) {\n    return s;\n  }\n\n  return `{\\`${s}\\`}`;\n};\n\nconst preserveTrailingSpace = (s: string) => {\n  let result = s;\n  if (result.endsWith(' ')) {\n    result = result.replace(/^(.*?)(\\s+)$/, \"$1{'$2'}\");\n  }\n\n  if (result.startsWith(' ')) {\n    result = result.replace(/^(\\s+)(.*)$/, \"{'$1'}$2\");\n  }\n\n  return result;\n};\n\nexport default (\n  node: TreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  if (node.type === 'number') {\n    return String(node.value);\n  }\n\n  if (node.type === 'string') {\n    return node.value\n      ? `${preserveTrailingSpace(escape(String(node.value)))}`\n      : '';\n  }\n\n  if (node.type === 'ReactElement') {\n    return formatReactElementNode(node, inline, lvl, options);\n  }\n\n  if (node.type === 'ReactFragment') {\n    return formatReactFragmentNode(node, inline, lvl, options);\n  }\n\n  throw new TypeError(`Unknow format type \"${node.type}\"`);\n};\n","/* @flow */\n\nimport formatTreeNode from './formatTreeNode';\nimport type { Options } from './../options';\nimport type { TreeNode } from './../tree';\n\nexport default (node: TreeNode, options: Options): string =>\n  formatTreeNode(node, false, 0, options);\n","/* @flow */\n\nimport formatTree from './formatter/formatTree';\nimport parseReactElement from './parser/parseReactElement';\nimport { isValidElement } from 'react';\nimport type { Element as ReactElement } from 'react';\nimport type { Options } from './options';\nimport formatComplexDataStructure from './formatter/formatComplexDataStructure';\n\nconst reactElementToJsxString = (\n  element: ReactElement<any>,\n  {\n    filterProps = [],\n    showDefaultProps = true,\n    showFunctions = false,\n    functionValue,\n    tabStop = 2,\n    useBooleanShorthandSyntax = true,\n    useFragmentShortSyntax = true,\n    sortProps = true,\n    maxInlineAttributesLineLength,\n    displayName,\n  }: Options = {}\n) => {\n  const options = {\n    filterProps,\n    showDefaultProps,\n    showFunctions,\n    functionValue,\n    tabStop,\n    useBooleanShorthandSyntax,\n    useFragmentShortSyntax,\n    sortProps,\n    maxInlineAttributesLineLength,\n    displayName,\n  };\n\n  if (!isValidElement(element)) {\n    return formatComplexDataStructure(element, true, 0, options);\n  }\n\n  // if (!element) {\n  // throw new Error('react-element-to-jsx-string: Expected a ReactElement');\n  // }\n\n  return formatTree(parseReactElement(element, options), options);\n};\n\nexport default reactElementToJsxString;\n\nexport {\n  inlineFunction,\n  preserveFunctionLineBreak,\n} from './formatter/formatFunction';\n"],"names":["times","tabStop","Array","fill","join","safeSortObject","value","seen","_typeof","Date","RegExp","React","isValidElement","add","isArray","map","v","Object","keys","sort","reduce","result","key","has","sortObject","WeakSet","createStringTreeNode","type","createNumberTreeNode","createReactElementTreeNode","displayName","props","defaultProps","childrens","createReactFragmentTreeNode","supportFragment","Boolean","Fragment","getFunctionTypeName","functionType","name","getWrappedComponentDisplayName","Component","$$typeof","Memo","ForwardRef","render","getReactElementDisplayName","element","isForwardRef","isMemo","isContextConsumer","concat","_context","isContextProvider","isLazy","isProfiler","isStrictMode","isSuspense","noChildren","propsValue","propName","onlyMeaningfulChildren","children","filterProps","originalProps","cb","filteredProps","filter","forEach","parseReactElement","options","_options$displayName","displayNameFn","Error","ref","search","Children","toArray","child","noRefCheck","inlineFunction","fn","toString","split","line","trim","preserveFunctionLineBreak","defaultFunctionValue","_options$functionValu","functionValue","showFunctions","inline","lvl","normalizedValue","stringifiedValue","prettyPrint","transform","currentObj","prop","originalResult","currentValue","formatTreeNode","formatFunction","replace","spacer","escape","s","formatPropValue","propValue","String","symbolDescription","valueOf","isNaN","toISOString","isPlainObject","formatComplexDataStructure","hasValue","hasDefaultValue","defaultValue","usedValue","useBooleanShorthandSyntax","formattedPropValue","attributeFormattedInline","attributeFormattedMultiline","isMultilineAttribute","includes","previousNodes","currentNode","nodes","slice","length","previousNode","push","isKeyOrRefProps","shouldSortUserProps","haveKeyProp","haveRefProp","userPropsOnly","oneProp","sortedProps","_toConsumableArray","unshift","createPropFilter","indexOf","compensateMultilineStringElementIndentation","formattedElement","offset","formatOneChildren","onlyPropsWithOriginalValue","haveDefaultValue","isInlineAttributeTooLong","attributes","inlineAttributeString","maxInlineAttributesLineLength","shouldRenderMultilineAttr","containsMultilineAttr","node","_node$displayName","_node$props","_node$defaultProps","showDefaultProps","sortProps","out","outInlineAttr","outMultilineAttr","visibleAttributeNames","propFilter","defaultPropName","sortPropsByNames","attributeName","_formatProp","formatProp","newLvl","mergeSiblingPlainStringChildrenReducer","REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX","REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX","toReactElementTreeNode","isKeyedFragment","_ref","hasNoChildren","_ref2","useFragmentShortSyntax","formatReactElementNode","jsxStopChars","shouldBeEscaped","some","jsxStopChar","preserveTrailingSpace","endsWith","startsWith","formatReactFragmentNode","TypeError","reactElementToJsxString","arguments","undefined","_ref$filterProps","_ref$showDefaultProps","_ref$showFunctions","_ref$tabStop","_ref$useBooleanShorth","_ref$useFragmentShort","_ref$sortProps","formatTree"],"mappings":"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"}